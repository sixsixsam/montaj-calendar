from fastapi import APIRouter, Depends, HTTPException, Query
from pydantic import BaseModel
from typing import Optional, List
from datetime import datetime, timedelta
from ..auth import require_role, get_user
from ..firestore import db

router = APIRouter(prefix="/assignments", tags=["assignments"])

# =============================
# üìò –ú–û–î–ï–õ–ò
# =============================

class AssignmentCreate(BaseModel):
    projectId: str
    statusId: str
    statusName: str
    dateStart: str                 # "YYYY-MM-DD"
    dateEnd: Optional[str] = None  # –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–ª–∏ ‚Äî –≤–æ–∑—å–º—ë–º –∫–∞–∫ dateStart
    workerIds: List[str] = []      # ‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–µ–Ω–Ω–æ email-—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    workerNames: List[str] = []
    sectionId: Optional[str] = None
    sectionName: Optional[str] = None
    state: str = "in_progress"
    comments: Optional[str] = ""

class AssignmentUpdate(BaseModel):
    statusId: Optional[str] = None
    statusName: Optional[str] = None
    dateStart: Optional[str] = None
    dateEnd: Optional[str] = None
    workerIds: Optional[List[str]] = None
    workerNames: Optional[List[str]] = None
    sectionId: Optional[str] = None
    sectionName: Optional[str] = None
    state: Optional[str] = None
    comments: Optional[str] = None

# =============================
# üìó –†–û–£–¢–´
# =============================

@router.get("/", dependencies=[Depends(require_role("admin","manager","installer","worker"))])
def list_assignments(
    date_from: Optional[str] = Query(None),
    date_to: Optional[str] = Query(None),
    worker_uid: Optional[str] = Query(None),
    project_id: Optional[str] = Query(None),
    section_id: Optional[str] = Query(None),
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.
    worker_uid ‚Äî –∑–¥–µ—Å—å –ª—É—á—à–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å email –º–æ–Ω—Ç–∞–∂–Ω–∏–∫–∞ (–∫–∞–∫ –º—ã –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ workerIds).
    """
    q = db.collection("assignments")

    if project_id:
        q = q.where("projectId", "==", project_id)
    if section_id:
        q = q.where("sectionId", "==", section_id)
    if worker_uid:
        q = q.where("workerIds", "array_contains", worker_uid)

    docs = [{"id": d.id, **(d.to_dict() or {})} for d in q.stream()]

    # –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç (–ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞)
    if date_from:
        docs = [x for x in docs if x.get("dateEnd", x.get("dateStart","")) >= date_from]
    if date_to:
        docs = [x for x in docs if x.get("dateStart", "") <= date_to]

    return docs

@router.get("/my", dependencies=[Depends(require_role("installer","worker","manager","admin"))])
def my_assignments(current_user: dict = Depends(get_user),
                   date_from: Optional[str] = Query(None),
                   date_to: Optional[str] = Query(None)):
    """–ë—ã—Å—Ç—Ä—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —Ç–æ–ª—å–∫–æ –µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–ø–æ email)."""
    email = (current_user.get("email") or "").strip().lower()
    if not email:
        return []
    q = db.collection("assignments").where("workerIds", "array_contains", email)
    docs = [{"id": d.id, **(d.to_dict() or {})} for d in q.stream()]
    if date_from:
        docs = [x for x in docs if x.get("dateEnd", x.get("dateStart","")) >= date_from]
    if date_to:
        docs = [x for x in docs if x.get("dateStart","") <= date_to]
    return docs

@router.post("/", dependencies=[Depends(require_role("admin","manager"))])
def create_assignment(payload: AssignmentCreate):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (dateEnd –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ = dateStart, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω)."""
    try:
        start = datetime.fromisoformat(payload.dateStart)
        end = datetime.fromisoformat(payload.dateEnd or payload.dateStart)
    except Exception:
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç (YYYY-MM-DD)")

    if end < start:
        raise HTTPException(status_code=400, detail="dateEnd –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ dateStart")

    batch = db.batch()
    cur = start
    count = 0

    while cur <= end:
        ref = db.collection("assignments").document()
        data = {
            "projectId": payload.projectId,
            "statusId": payload.statusId,
            "statusName": payload.statusName,
            "dateStart": payload.dateStart,
            "dateEnd": end.date().isoformat(),
            "date": cur.date().isoformat(),  # —É–¥–æ–±–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–Ω—è
            "workerIds": payload.workerIds,
            "workerNames": payload.workerNames,
            "sectionId": payload.sectionId,
            "sectionName": payload.sectionName,
            "state": payload.state,
            "comments": payload.comments or "",
            "created_at": datetime.utcnow().isoformat(),
        }
        batch.set(ref, data)
        cur += timedelta(days=1)
        count += 1

    batch.commit()
    return {"ok": True, "count": count}

@router.put("/{assignment_id}")
def update_assignment(assignment_id: str,
                      payload: AssignmentUpdate,
                      current_user: dict = Depends(get_user)):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.
    - admin/manager: –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ª—é–±—ã–µ –ø–æ–ª—è
    - installer: –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ:
        * state -> "done_pending" (–Ø –≤—ã–ø–æ–ª–Ω–∏–ª, –∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∏)
        * state -> "extend_requested" (–ü—Ä–æ—à—É –ø—Ä–æ–¥–ª–µ–Ω–∏—è)
        * comments (–∫—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ)
      –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π, –≥–¥–µ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ workerIds (–ø–æ email).
    """
    ref = db.collection("assignments").document(assignment_id)
    doc = ref.get()
    if not doc.exists:
        raise HTTPException(status_code=404, detail="Assignment not found")
    cur = doc.to_dict() or {}

    role = current_user.get("role")
    email = (current_user.get("email") or "").strip().lower()

    updates = {k: v for k, v in payload.model_dump(exclude_none=True).items()}

    if role in ("admin","manager"):
        if updates:
            updates["updated_at"] = datetime.utcnow().isoformat()
            ref.update(updates)
        return {"ok": True}

    # –î–ª—è –º–æ–Ω—Ç–∞–∂–Ω–∏–∫–∞ ‚Äî –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
    if role == "installer":
        if email and email in (cur.get("workerIds") or []):
            allowed_states = {"done_pending", "extend_requested"}
            fields_ok = True

            # –†–∞–∑—Ä–µ—à–∞–µ–º –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ state –∏ comments
            for key in list(updates.keys()):
                if key not in ("state", "comments"):
                    fields_ok = False
                    break

            if not fields_ok:
                raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —ç—Ç–∏—Ö –ø–æ–ª–µ–π")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å state
            if "state" in updates and updates["state"] not in allowed_states:
                raise HTTPException(status_code=400, detail="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –º–æ–Ω—Ç–∞–∂–Ω–∏–∫–∞")

            updates["updated_at"] = datetime.utcnow().isoformat()
            ref.update(updates)
            return {"ok": True}

        raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤: –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç")

    # –ü—Ä–æ—á–∏–º —Ä–æ–ª—è–º ‚Äî –Ω–∏—á–µ–≥–æ
    raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

@router.delete("/{assignment_id}", dependencies=[Depends(require_role("admin","manager"))])
def delete_assignment(assignment_id: str):
    ref = db.collection("assignments").document(assignment_id)
    if ref.get().exists:
        ref.delete()
    return {"ok": True}

# =============================
# ‚öôÔ∏è CORS preflight (OPTIONS)
# =============================

@router.options("/", include_in_schema=False)
def options_root():
    return {"ok": True}

@router.options("/{assignment_id}", include_in_schema=False)
def options_id(assignment_id: str):
    return {"ok": True}
